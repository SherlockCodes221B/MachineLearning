# -*- coding: utf-8 -*-
"""parkinson's_desiease_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kyfjISnPQC1JHuCF5Sy1R_ZUW408OJtv
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

park = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Parkinson's disease/Parkinsson disease.csv")
park.info()

park.isnull().sum()

park.shape

x = park.drop(columns=['name','status'])
y = park['status']

xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2,random_state=2)

model = LogisticRegression()
model.fit(xtrain,ytrain)

ypredict = model.predict(xtest)

xtrain_predict = model.predict(xtrain)
training_data_accuracy = accuracy_score(ytrain,xtrain_predict)
print('Accuracy score of training data : ', training_data_accuracy)

xtest_predict = model.predict(xtest)
testing_data_accuracy = accuracy_score(ytest,xtest_predict)
print('Accuracy score of testing data : ', testing_data_accuracy)

input_data = (197.07600,206.89600,192.05500,0.00289,0.00001,0.00166,0.00168,0.00498,0.01098,0.09700,0.00563,0.00680,0.00802,0.01689,0.00339,26.77500,0.422229,0.741367,-7.348300,0.177551,1.743867,0.085569)

# changing input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the data
# std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(input_data_reshaped)
print(prediction)


if (prediction[0] == 0):
  print("The Person does not have Parkinsons Disease")

else:
  print("The Person has Parkinsons")

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(xtrain)

xtrain = scaler.transform(xtrain)
xtest = scaler.transform(xtest)

from sklearn import svm
model2 = svm.SVC(kernel = 'linear')
model2.fit(xtrain,ytrain)

X_train_prediction = model.predict(xtrain)
training_data_accuracy = accuracy_score(ytrain, X_train_prediction)

print('Accuracy score of training data : ', training_data_accuracy)

input_data = (197.07600,206.89600,192.05500,0.00289,0.00001,0.00166,0.00168,0.00498,0.01098,0.09700,0.00563,0.00680,0.00802,0.01689,0.00339,26.77500,0.422229,0.741367,-7.348300,0.177551,1.743867,0.085569)

# changing input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the data
std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)


if (prediction[0] == 0):
  print("The Person does not have Parkinsons Disease")

else:
  print("The Person has Parkinsons")