# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QzBzyTuPMm96YKxmP26Q4XmBOmc6kTRQ
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

diabetes_data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/DiabetesPrediction/diabetes.csv')
diabetes_data.head()

diabetes_data.shape

diabetes_data.describe()

X = diabetes_data.drop(columns='Outcome', axis=1)
Y = diabetes_data['Outcome']

scaler = StandardScaler()
scaler.fit(X)

standard_data = scaler.transform(X)

X = standard_data

Y = diabetes_data['Outcome']

xtrain, xtest, ytrain, ytest = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)
classifier = svm.SVC(kernel='linear')
classifier.fit(xtrain, ytrain)

prected_value_xtest = classifier.predict(xtest)
accuracy = accuracy_score(prected_value_xtest, ytest)
print(accuracy)

predicted_value_xtrain = classifier.predict(xtrain)
accuracy = accuracy_score(predicted_value_xtrain, ytrain)
print(accuracy)

input_data = (5,166,72,19,175,25.8,0.587,51)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')