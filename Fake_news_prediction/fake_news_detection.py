# -*- coding: utf-8 -*-
"""Fake_News_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JSGGZTITBB1pv-XopnhjGzzvAOzfiuSH
"""

import pandas as pd
import numpy as np
import re
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

import csv
news_dataset = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/FakeNews_detection/train.csv',engine='python', encoding="latin1",on_bad_lines=str)
news_dataset.shape

news_dataset.head()

news_dataset.isnull().sum()

news_dataset = news_dataset.fillna('')

news_dataset['content'] = news_dataset['author']+' '+news_dataset['title']

print(news_dataset['content'])

X = news_dataset.drop(columns='label', axis=1)
Y = news_dataset['label']

port = PorterStemmer()
def stemming(content):
  steammed_content = re.sub('[^a-zA-Z]',' ',content)
  steammed_content = steammed_content.lower()
  steammed_content = steammed_content.split()
  steammed_content = [port.stem(word) for word in steammed_content if not word in stopwords.words('english')]
  steammed_content = ' '.join(steammed_content)
  return steammed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

X = news_dataset['content'].values
Y = news_dataset['label'].values
print(X)
print(Y)

Y.shape

vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)
X

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

model = LogisticRegression()
model.fit(X_train, Y_train)

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

X_new = X_test[3]

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')

print(Y_test[3])