# -*- coding: utf-8 -*-
"""Bengaluru_prediction_house.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u-PseQyHlvPeLa7-_8uxwFROGyS0cPwV
"""

import pandas as pd
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/WIP/House_price_prediction/Bengaluru_House_Data.csv')

df.columns

df.drop(columns=['area_type','availability','society'],inplace = True)

df.head()

df.dropna(inplace=True)

df['bhk'] = df['size'].apply(lambda x: int(x.split(' ')[0]))

df.head()

def is_float(x):
    try:
        float(x)
    except:
        return False
    return True

df[~df['total_sqft'].apply(is_float)].head(10)

def convert_sqft_to_num(x):
    tokens = x.split('-')
    if len(tokens)==2:
        return (float(tokens[0]) + float(tokens[1])) / 2
    try:
        return float(x)
    except:
        return None

df['total_sqft'] = df['total_sqft'].apply(convert_sqft_to_num)

df[~df['total_sqft'].apply(is_float)].head(10)

df['per_sqft'] = df['price'] * 100000 / df['total_sqft']

df.location = df.location.apply(lambda x : x.strip())

location_stats =df.groupby('location')['location'].agg('count').sort_values(ascending=False)
location_stats_lessthan_10=location_stats[location_stats<=10]
location_stats_lessthan_10

df.location = df.location.apply(lambda x : 'other' if x in location_stats_lessthan_10 else x)
df.head(10)

df[df.total_sqft/df.bhk<300].head(10)

df = df[~(df.total_sqft/df.bhk<300)]

df.shape

df.per_sqft.describe()

def remove_pps_outliers(df):
    df_out = pd.DataFrame()
    for key,subdf in df.groupby('location'):
        m = np.mean(subdf.per_sqft)
        std = np.std(subdf.per_sqft)
        reduced_df = subdf[(subdf.per_sqft>(m-std)) & (subdf.per_sqft<=(m+std))]
        df_out = pd.concat([df_out,reduced_df],ignore_index=True)
    return df_out

df=remove_pps_outliers(df)
df.shape

df2 = df.drop(['size','per_sqft'],axis='columns')
df2.shape

dummies = pd.get_dummies(df2.location)
dummies.head(3)

df3 = pd.concat([df2,dummies.drop('other',axis='columns')],axis='columns')
df3.head(3)

df3.drop(columns =['location'],inplace=True)
df3.head(3)

X = df3.drop(columns=['price'])
X.head(3)

y = df3.price
y.head(3)

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)
lr_clf = LinearRegression()
lr_clf.fit(X_train,y_train)
lr_clf.score(X_test,y_test)

from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score

cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)

cross_val_score(LinearRegression(), X, y, cv=cv)

from sklearn.model_selection import ShuffleSplit, GridSearchCV
from sklearn.linear_model import LinearRegression, Lasso
from sklearn.tree import DecisionTreeRegressor
import pandas as pd

def find_best_model_using_gridsearchcv(X,y):
    algos = {
        'linear_regression' : {
            'model': LinearRegression(),
            'params': {

            }
        },
        'lasso': {
            'model': Lasso(),
            'params': {
                'alpha': [1,2],
                'selection': ['random', 'cyclic']
            }
        },
        'decision_tree': {
            'model': DecisionTreeRegressor(),
            'params': {
                'criterion' : ['mse','friedman_mse'],
                'splitter': ['best','random']
            }
        }
    }
    scores = []
    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)
    for algo_name, config in algos.items():
        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)
        gs.fit(X,y)
        scores.append({
            'model': algo_name,
            'best_score': gs.best_score_,
            'best_params': gs.best_params_
        })

    return pd.DataFrame(scores,columns=['model','best_score','best_params'])

find_best_model_using_gridsearchcv(X,y)

def predict_price(location,sqft,bath,bhk):
    loc_index = np.where(X.columns==location)[0][0]

    x = np.zeros(len(X.columns))
    x[0] = sqft
    x[1] = bath
    x[2] = bhk
    if loc_index >= 0:
        x[loc_index] = 1

    return lr_clf.predict([x])[0]

predict_price('1st Phase JP Nagar',700, 2, 2)

